"""
    Api Documentation

    Api Documentation  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.livestock_api_response_vo import LivestockApiResponseVO
from openapi_client.model.seamless_forecast_api_response_vo import SeamlessForecastApiResponseVO
from openapi_client.model.short_term_live_api_response_vo import ShortTermLiveApiResponseVO


class ApiControllerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_livestock_list_api_response_using_get_endpoint = _Endpoint(
            settings={
                'response_type': (LivestockApiResponseVO,),
                'auth': [],
                'endpoint_path': '/api/livestockList',
                'operation_id': 'get_livestock_list_api_response_using_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_name',
                ],
                'required': [
                    'user_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_name':
                        (str,),
                },
                'attribute_map': {
                    'user_name': 'userName',
                },
                'location_map': {
                    'user_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_seamless_forecast_api_test_response_using_get_endpoint = _Endpoint(
            settings={
                'response_type': (ShortTermLiveApiResponseVO,),
                'auth': [],
                'endpoint_path': '/api/ShortTermLiveData',
                'operation_id': 'get_seamless_forecast_api_test_response_using_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'base_time',
                    'end_date',
                    'latitude',
                    'longitude',
                    'start_date',
                ],
                'required': [
                    'base_time',
                    'end_date',
                    'latitude',
                    'longitude',
                    'start_date',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'base_time':
                        (str,),
                    'end_date':
                        (str,),
                    'latitude':
                        (str,),
                    'longitude':
                        (str,),
                    'start_date':
                        (str,),
                },
                'attribute_map': {
                    'base_time': 'baseTime',
                    'end_date': 'endDate',
                    'latitude': 'latitude',
                    'longitude': 'longitude',
                    'start_date': 'startDate',
                },
                'location_map': {
                    'base_time': 'query',
                    'end_date': 'query',
                    'latitude': 'query',
                    'longitude': 'query',
                    'start_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_seamless_forecast_api_test_response_using_get1_endpoint = _Endpoint(
            settings={
                'response_type': (SeamlessForecastApiResponseVO,),
                'auth': [],
                'endpoint_path': '/api/seamlessForecast',
                'operation_id': 'get_seamless_forecast_api_test_response_using_get1',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'end_date',
                    'latitude',
                    'longitude',
                    'start_date',
                ],
                'required': [
                    'end_date',
                    'latitude',
                    'longitude',
                    'start_date',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'end_date':
                        (str,),
                    'latitude':
                        (str,),
                    'longitude':
                        (str,),
                    'start_date':
                        (str,),
                },
                'attribute_map': {
                    'end_date': 'endDate',
                    'latitude': 'latitude',
                    'longitude': 'longitude',
                    'start_date': 'startDate',
                },
                'location_map': {
                    'end_date': 'query',
                    'latitude': 'query',
                    'longitude': 'query',
                    'start_date': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_livestock_list_api_response_using_get(
        self,
        user_name,
        **kwargs
    ):
        """livestockList 요청  # noqa: E501

        livestock 축사데이터를 조회합니다  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_livestock_list_api_response_using_get(user_name, async_req=True)
        >>> result = thread.get()

        Args:
            user_name (str): 에스이랩

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            LivestockApiResponseVO
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['user_name'] = \
            user_name
        return self.get_livestock_list_api_response_using_get_endpoint.call_with_http_info(**kwargs)

    def get_seamless_forecast_api_test_response_using_get(
        self,
        base_time,
        end_date,
        latitude,
        longitude,
        start_date,
        **kwargs
    ):
        """ShortTermLiveData 기상청 초단기실황 데이터 요청  # noqa: E501

        초단기실황 데이터를 조회합니다(22년 2월 9일 - )  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_seamless_forecast_api_test_response_using_get(base_time, end_date, latitude, longitude, start_date, async_req=True)
        >>> result = thread.get()

        Args:
            base_time (str): 발표시각:0900
            end_date (str): 종료날짜:2022-02-10
            latitude (str): 위도:35.82053888888889
            longitude (str): 경도:127.14271111111111
            start_date (str): 시작날짜:2022-02-09

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ShortTermLiveApiResponseVO
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['base_time'] = \
            base_time
        kwargs['end_date'] = \
            end_date
        kwargs['latitude'] = \
            latitude
        kwargs['longitude'] = \
            longitude
        kwargs['start_date'] = \
            start_date
        return self.get_seamless_forecast_api_test_response_using_get_endpoint.call_with_http_info(**kwargs)

    def get_seamless_forecast_api_test_response_using_get1(
        self,
        end_date,
        latitude,
        longitude,
        start_date,
        **kwargs
    ):
        """SeamlessForecast 요청  # noqa: E501

        SeamlessForecast 자료를 조회합니다  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_seamless_forecast_api_test_response_using_get1(end_date, latitude, longitude, start_date, async_req=True)
        >>> result = thread.get()

        Args:
            end_date (str): 종료날짜:2022-01-31
            latitude (str): 위도:35.82053888888889
            longitude (str): 경도:127.14271111111111
            start_date (str): 시작날짜:2022-01-01

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SeamlessForecastApiResponseVO
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['end_date'] = \
            end_date
        kwargs['latitude'] = \
            latitude
        kwargs['longitude'] = \
            longitude
        kwargs['start_date'] = \
            start_date
        return self.get_seamless_forecast_api_test_response_using_get1_endpoint.call_with_http_info(**kwargs)

